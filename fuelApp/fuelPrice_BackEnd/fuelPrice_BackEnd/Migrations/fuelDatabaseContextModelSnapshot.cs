// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fuelPrice_BackEnd.Context;

#nullable disable

namespace fuelPriceBackEnd.Migrations
{
    [DbContext(typeof(fuelDatabaseContext))]
    partial class fuelDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("fuelPrice_BackEnd.Models.Pricing", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<int>("clientID")
                        .HasColumnType("int");

                    b.Property<string>("deliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deliveryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gallonsOrdered")
                        .HasColumnType("int");

                    b.Property<int>("orderNumber")
                        .HasColumnType("int");

                    b.Property<float>("pricePerGallon")
                        .HasColumnType("real");

                    b.Property<float>("totalAmountDue")
                        .HasColumnType("real");

                    b.HasKey("orderID");

                    b.HasIndex("clientID");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("fuelPrice_BackEnd.Models.User", b =>
                {
                    b.Property<int>("clientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientID"));

                    b.Property<int>("accessLevel")
                        .HasColumnType("int");

                    b.Property<string>("addressOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("addressTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipcode")
                        .HasColumnType("int");

                    b.HasKey("clientID");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("fuelPrice_BackEnd.Models.Pricing", b =>
                {
                    b.HasOne("fuelPrice_BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("clientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
